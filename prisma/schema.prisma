generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum FriendStatus {
  ACCEPTED
  DECLINED
  PENDING
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model BlockRelation {
  id        String   @id @default(cuid())
  blockerId String   @map("blocker_id")
  blockedId String   @map("blocked_id")
  createdAt DateTime @default(now()) @map("created_at")
  blocker   User     @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@map("block_relations")
}

model FriendRelation {
  id        String       @id @default(cuid())
  userId    String       @map("user_id")
  friendId  String       @map("friend_id")
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  user      User         @relation("SentRequests", fields: [userId], references: [id], onDelete: Cascade)
  friend    User         @relation("ReceivedRequests", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId, status])
  @@index([friendId, status])
  @@index([userId, friendId, status])
  @@map("friend_relations")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String           @id @default(cuid())
  name                   String?
  email                  String?          @unique
  emailVerified          DateTime?        @map("email_verified")
  image                  String?
  password               String?          @db.Text
  accounts               Account[]
  sessions               Session[]
  sentFriendRequests     FriendRelation[] @relation("SentRequests")
  receivedFriendRequests FriendRelation[] @relation("ReceivedRequests")
  blockedUsers           BlockRelation[]  @relation("Blocker")
  blockedByUsers         BlockRelation[]  @relation("Blocked")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
